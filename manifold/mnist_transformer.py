import numpy as np
import argparse
import pickle

'''
Transforms adversarial example images generated by FGSM into the manifold space
Takes the start and end index of the examples to transform, 
The directory from which to load the adversarial images 
    (note that images in that directory should be named x..y where the start and end 
    indices are within x and y),
And a file name for where to save a numpy array of transformed examples
'''

def main(args):
    embedding_file = args.embedding_file
    load_dir = args.load_dir
    start_index = args.start_index
    end_index = args.end_index
    save_fname = args.save_fname
    embedding = pickle.load(open(embedding_file, "rb"))

    print("Creating adversarial points")
    adv_examples = []
    for i in range(start_index, end_index):
        adv_x = np.load("{}/{}.npy".format(load_dir, str(i)))
        print("Transforming example {}".format(str(i)))
        m_x = embedding.transform(adv_x.reshape(1, 28*28))
        adv_examples.append(m_x[0])
    np.save(save_fname, adv_examples)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("embedding_file", type=str, action="store",
                        help="The embedding pickle file")
    parser.add_argument("load_dir", type=str, action="store",
                        help="The directory containing adversarial images; images should be labelled 1.npy, 2.npy, etc")
    parser.add_argument("start_index", type=int, action="store",
                        help="The first index of adversarial images to be transformed")
    parser.add_argument("end_index", type=int, action="store",
                        help="The last index of adversarial images to be transformed")
    parser.add_argument("save_fname", type=str, action="store",
                        help="The file name to save the .npy of transformed examples")
    args = parser.parse_args()
    main(args)